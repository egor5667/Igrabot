#–§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
from datetime import datetime
from time import sleep

from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram import Router, F, Bot

from testconf import TOKEN_API
bot = Bot(token=TOKEN_API)

import app.keyboards as kb
from app.keyboards import KeyAdm, base_key, editKey
from testconf import ADM_IDS, SPEC_ROLE
from app.statuses import Reg, AdmStatus, userMenu, editProfile
import DBcontrol
from  app.Timecontrol import TimeCount
from app.sendler import sedText
import AchiveControl

router = Router()

reg_info = {}



@router.message(Command("help"))
async def help_comand(message: Message):
    await message.reply("–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å–æ –≤–∞–º –æ –≤—Å—Ç—Ä–µ—á–∞—Ö, —Ä–∞–∑–¥–∞–≤–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –∫–ª—É–±–µ –∏ —Å–æ–æ–±—â–∞—Ç—å –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")


@router.message(Command('start'))
async def start_comand(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≥—Ä–∏–∫. –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–ª—É–±–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä '–ò–≥—Ä–∞—Ä–∏—É–º'.")
    await message.answer('–ò–∑-–∑–∞ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–æ.\n –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ.')
    if DBcontrol.RegistrDB.FindID(int(message.from_user.id)):
        text = AchiveControl.AchFReg.getRegAch(message.from_user.id)
        if text != 'None':
            await message.answer(text)
        await message.answer('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', reply_markup=base_key)
        await state.set_state(userMenu.qact)
    else:
        DBcontrol.RegistrDB.sentID(int(message.from_user.id))
        await state.set_state(Reg.qname)
        await message.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! \n"
                             "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
    if ADM_IDS.count(str(message.from_user.id)) > 0:
        DBcontrol.RegistrDB.sentRole(int(message.from_user.id), 'adm')
        if SPEC_ROLE.count(str(message.from_user.id)) > 0:
            await message.answer('–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "–ö–æ–Ω—å-–≤-–ø–∞–ª—å—Ç–æ". –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!')
        await state.set_state(AdmStatus.qact)
        await message.answer('–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"', reply_markup=kb.KeyAdm.menuKey)
    else:
        DBcontrol.RegistrDB.sentRole(int(message.from_user.id), 'chlen')


@router.message(F.text == '–°–ñ–ï–ï–ï–ß–¨ –í–°–Å–Å–Å–Å!!!!!')
async def delall(message: Message):
    await message.answer('–í–°–Å –°–ì–û–†–ï–õ–û –ù–ê–•–£–ô! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ.\n\n'
                         '–ù–∞–∂–º–∏ –Ω–∞ üëâ /start')


@router.message(Reg.qname)
async def reg_s2(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    DBcontrol.RegistrDB.sentName(int(message.from_user.id), message.text)
    await state.set_state(Reg.qsname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")


@router.message(Reg.qsname)
async def reg_s3(message: Message, state: FSMContext):
    await state.update_data(sname=message.text)
    DBcontrol.RegistrDB.sentSName(int(message.from_user.id), str(message.text))
    await state.set_state(Reg.qinstit)
    await message.answer("–¢—ã –∏–∑ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ?", reply_markup=kb.YNkeyb)


@router.message(Reg.qinstit)
async def reg_s4(message: Message, state: FSMContext):
    await state.update_data(instit=message.text)
    if message.text == '‚úÖ–î–∞':
        await state.set_state(Reg.fped)
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞—É–ª—å—Ç–µ—Ç', reply_markup=kb.faculty_one)
    if message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ. –î–æ—Å—Ç–∞—Ç—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç')
        await state.update_data(faculty='–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*')
        await state.set_state(Reg.qcourse)
    DBcontrol.RegistrDB.sentInstitute(int(message.from_user.id), str(message.text))


@router.message(Reg.fped, F.text == '‚¨ÖÔ∏è–ù–∞ —Å—Ç—Ä. 1')
async def reg_topage1(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 1', reply_markup=kb.faculty_one)


@router.message(Reg.fped, (F.text == '‚û°Ô∏è–ù–∞ —Å—Ç—Ä. 2' or F.text == '‚¨ÖÔ∏è–ù–∞ —Å—Ç—Ä. 2'))
async def reg_topage2(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2', reply_markup=kb.faculty_two)


@router.message(Reg.fped, F.text == '‚û°Ô∏è–ù–∞ —Å—Ç—Ä. 3')
async def reg_topage3(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 3', reply_markup=kb.faculty_three)


@router.message(Reg.fped)
async def reg_s5ped(message: Message, state: FSMContext):
    await state.update_data(faculty=message.text)
    DBcontrol.RegistrDB.sentFacult(int(message.from_user.id), str(message.text))
    await message.answer('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç')
    await state.set_state(Reg.qcourse)


@router.message(Reg.qcourse)
async def check_reg(message: Message, state: FSMContext):
    await state.update_data(course=message.text)
    DBcontrol.RegistrDB.sentCourse(int(message.from_user.id), str(message.text))
    info = await state.get_data()
    global reg_info
    reg_info[str(message.from_user.id)] = info
    # print(reg_info)
    await message.answer(f'–Ø –ø–æ–Ω—è–ª —Ç–µ–±—è. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!)\n\n'
                         f'–î–∞–≤–∞–π –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º.\n'
                         f'–¢–µ–±—è –∑–æ–≤—É—Ç {reg_info[str(message.from_user.id)]["name"]} {reg_info[str(message.from_user.id)]["sname"]}\n'
                         f'–¢—ã –∏–∑ –ø–µ–¥–∞: {reg_info[str(message.from_user.id)]["instit"]}\n'
                         f'—Ç–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {reg_info[str(message.from_user.id)]["faculty"]}\n'
                         f'–ö—É—Ä—Å: {reg_info[str(message.from_user.id)]["course"]}\n\n\n'
                         f'*–ï—Å–ª–∏ –≤—ã –Ω–µ —É—á–∏—Ç–µ—Å—å –≤ –Æ–£—Ä–ì–ì–ü–£, –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ')
    await message.answer('–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', reply_markup=kb.YNkeyb)
    await state.set_state(Reg.fcheck)


@router.message(Reg.fcheck)
async def FinCheck(message: Message, state: FSMContext):
    if message.text == '‚úÖ–î–∞':
        await message.answer_photo(photo = 'AgACAgIAAxkBAAICm2bUdxAgj2vU6NzkyzLftKfofBQtAALR3jEbFY6hSidi3586Bn4rAQADAgADeQADNQQ',
                                   caption ='–£—Ä–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –Ω–∞–º!',
                                   reply_markup=base_key)
        await message.answer(AchiveControl.AchFReg.getRegAch(message.from_user.id))
        await message.answer_sticker('CAACAgIAAxkBAAICnmbUdyeDAevdrt88kPc9EI5pwmugAAIYVQACFThpSoaY4Mhc9xoLNQQ')
        await state.set_state(userMenu.qact)
        del reg_info[str(message.from_user.id)]
    if message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–û–π, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑. '
                             '–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n'
                             '–ù–∞–∂–º–∏ üëâ /start')
        await bot.send_message(ADM_IDS[0], f'–ê–õ–ê–†–ú! –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å  @{message.from_user.username}"'
                                           f' –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É—Ç–æ—á–Ω–∏ —É –Ω–µ–≥–æ, –≤—Å—ë –ª–∏ —Ö–æ—Ä–æ—à–æ.')


@router.message(userMenu.qact)
async def startUserMenu(message: Message, state: FSMContext):
    if message.text == '–ü—Ä–æ—Ñ–∏–ª—å':
        await message.answer(f'–ò —Ç–∞–∫, —á—Ç–æ –º—ã –∑–Ω–∞–µ–º –æ —Ç–µ–±–µ?\n'
                             f'–ò–º—è: {DBcontrol.GetData.GetUserInfo(message.from_user.id)["name"]} \n'
                             f'–§–∞–º–∏–ª–∏—è: {DBcontrol.GetData.GetUserInfo(message.from_user.id)["sname"]}\n'
                             f'–¢—ã –∏–∑ –ø–µ–¥–∞? {DBcontrol.GetData.GetUserInfo(message.from_user.id)["institute"]}\n'
                             f'–§–∞–∫—É–ª—å—Ç–µ—Ç: {DBcontrol.GetData.GetUserInfo(message.from_user.id)["facult"]}\n'
                             f'–ö—É—Ä—Å: {DBcontrol.GetData.GetUserInfo(message.from_user.id)["course"]} \n\n'
                             f'–ü–æ—Å–µ—Ç–∏–ª –≤—Å—Ç—Ä–µ—á: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö —Å–∫–æ—Ä–æ —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–Ω–∏—è–º–∏ –±–æ—Ç–∞.')
    elif message.text == '–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!':
        await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞ –∏ –º—ã –ø–µ—Ä–µ–¥–∞–¥–∏–º –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')
        await state.set_state(userMenu.qhelp)
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', reply_markup=editKey)
        await state.set_state(editProfile.qedit)

@router.message(editProfile.qedit)
async def choseEdit(message: Message, state: FSMContext):
    if message.text == '–ò–º—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–µ –∏–º—è')
        await state.set_state(editProfile.editname)
    elif message.text == '–§–∞–º–∏–ª–∏—è':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é')
        await state.set_state(editProfile.editsname)
    elif message.text == '–§–∞–∫—É–ª—å—Ç–µ—Ç':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç')
        await state.set_state(editProfile.editFaculty)
    elif message.text == '–ö—É—Ä—Å':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫—É—Ä—Å')
        await state.set_state(editProfile.editCourse)
    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ':
        await message.answer('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', reply_markup=base_key)
        await state.set_state(userMenu.qact)

@router.message(editProfile.editname)
async def editProfileName(message: Message, state: FSMContext):
    DBcontrol.RegistrDB.sentName(message.from_user.id, message.text)
    await message.answer('–ò–º—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ', reply_markup=editKey)
    await state.set_state(editProfile.qedit)

@router.message(editProfile.editsname)
async def editProfileSname(message: Message, state: FSMContext):
    DBcontrol.RegistrDB.sentSName(message.from_user.id, message.text)
    await message.answer('–§–∞–º–∏–ª–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞', reply_markup=editKey)
    await state.set_state(editProfile.qedit)

@router.message(editProfile.editFaculty)
async def editProfileFaculty(message: Message, state: FSMContext):
    DBcontrol.RegistrDB.sentFacult(message.from_user.id, message.text)
    await message.answer('–§–∞–∫—É–ª—å—Ç–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω', reply_markup=editKey)
    await state.set_state(editProfile.qedit)

@router.message(editProfile.editCourse)
async def editProfileCourse(message: Message, state: FSMContext):
    DBcontrol.RegistrDB.sentCourse(message.from_user.id, message.text)
    await message.answer('–ö—É—Ä—Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω', reply_markup=editKey)
    await state.set_state(editProfile.qedit)


@router.message(userMenu.qhelp)
async def sendHelp(message: Message, state: FSMContext):
    text = message.text
    await bot.send_message(ADM_IDS[0], f'–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ: \n\n'
                                       f'{text} \n\n'
                                       f'–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{message.from_user.username}')
    await message.answer('–Ø –ø–µ—Ä–µ–¥–∞–ª –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è c –í–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è.')

# @router.message(Command('hell'))
# async def hell_comand(message: Message):
#     await message.answer("–≠–¢–û –ú–û–Å –ë–õ–Ø–¢–¨ –î–£–®–ï–í–ù–û–ï –†–ê–í–ù–û–í–ï–°–ò–ï!", reply_markup=kb.base_key)



@router.message(AdmStatus.qact)
async def GetAdmAct(message: Message, state: FSMContext):
    if message.text == '–í—Å—Ç—Ä–µ—á–∏':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=KeyAdm.meetKey)
        await state.set_state(AdmStatus.meets)
    elif message.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—ã–ª–∫–∏')
        await state.set_state(AdmStatus.qTextsends)
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å ID —Ñ–æ—Ç–æ':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ —è –Ω–∞–ø–∏—à—É –µ–≥–æ ID –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª')
        await state.set_state(AdmStatus.phoID)
    elif message.text == '–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä ID':
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ç–∏–∫–µ—Ä')
        await state.set_state(AdmStatus.stikID)

@router.message(AdmStatus.phoID)
async def sendPhotoId(message: Message, state: FSMContext):
    print(f'photo: {message.photo[-1].file_id}')
    await state.set_state(AdmStatus.qact)

@router.message(AdmStatus.stikID)
async def sendStikId(message: Message, state: FSMContext):
    print(f'stiker: {message.sticker.file_id}')
    await state.set_state(AdmStatus.qact)

@router.message(AdmStatus.meets)
async def GetMeets(message: Message, state: FSMContext):
    if message.text == '–ù–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É':
        global st_meet
        st_meet = datetime.now()
        await message.answer(f'–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –≤—Å—Ç—Ä–µ—á—É –≤ {st_meet.strftime("%H:%M")}')

    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É':
        end_meet = datetime.now()
        await message.answer('–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ—Ç—Å—è...')
        DBcontrol.Meets.sendMeetData(datetime.now().strftime("%d.%m.%Y"),
                                     st_meet.strftime("%H:%M"),
                                     end_meet.strftime("%H:%M"),
                                     TimeCount(st_meet, end_meet))
        sleep(5)
        await message.answer(f'–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {end_meet.strftime("%H:%M")}. \n\n '
                             f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏: {TimeCount(st_meet, end_meet)} —Å–µ–∫—É–Ω–¥', reply_markup=KeyAdm.menuKey)
        await state.set_state(AdmStatus.qact)

@router.message(AdmStatus.qTextsends)
async def GetSendText(message: Message, state: FSMContext):
    global sendlerText
    sendlerText = message.text
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ \n\n'
                         f'{sendlerText}', reply_markup=KeyAdm.choseRole)
    await state.set_state(AdmStatus.qRolesends)

@router.message(AdmStatus.qRolesends)
async def GetRoles(message: Message, state: FSMContext):
    global sendlerRole
    sendlerRole = ''
    if message.text == '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã':
        sendlerRole = 'adm'
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {sendlerRole}', reply_markup=KeyAdm.sendKey)
        await state.set_state(AdmStatus.confsends)
    elif message.text == '–£—á–∞—Å—Ç–Ω–∏–∫–∏':
        sendlerRole = 'chlen'
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞ —Ä–æ–ª—å: {sendlerRole}', reply_markup=KeyAdm.sendKey)
        await state.set_state(AdmStatus.confsends)
    elif message.text == '–ü–æ ID':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await state.set_state(AdmStatus.qsendID)

@router.message(AdmStatus.qsendID)
async def getsendID(message: Message, state: FSMContext):
    global senID
    senID = int(message.text)
    await message.answer('–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=KeyAdm.sendKey)
    await state.set_state(AdmStatus.confsendsID)

@router.message(AdmStatus.confsendsID)
async def EndIDsendText(message: Message, state: FSMContext):
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏':
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...')
        await bot.send_message(senID, sendlerText)
        await message.answer('–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', reply_markup=KeyAdm.menuKey)
        await state.set_state(AdmStatus.qact)
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç':
        await message.answer('–î–∞–≤–∞–π –ø–æ–Ω–æ–≤—ã–π. –í—Å—ë —Ö—É–π–Ω—è. –í–≤–æ–¥–∏ –≤—Å—ë –µ—â–µ —Ä–∞–∑.')
        await state.set_state(AdmStatus.qTextsends)



@router.message(AdmStatus.confsends)
async def EndSendText(message: Message, state: FSMContext):
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏':
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...')
        users = DBcontrol.rassl.getUsersID(sendlerRole)
        await sedText(users, sendlerText)
        await message.answer('–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', reply_markup=KeyAdm.menuKey)
        await state.set_state(AdmStatus.qact)
    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç':
        await message.answer('–î–∞–≤–∞–π –ø–æ–Ω–æ–≤—ã–π. –í—Å—ë —Ö—É–π–Ω—è. –í–≤–æ–¥–∏ –≤—Å—ë –µ—â–µ —Ä–∞–∑.')
        await state.set_state(AdmStatus.qTextsends)






