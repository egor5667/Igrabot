#–§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F


import app.keyboards as kb
from app.statuses import Reg
import DBcontrol

router = Router()

reg_info = {}



@router.message(Command("help"))
async def help_comand(message: Message):
    await message.reply("–ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç")


@router.message(Command('start'))
async def start_comand(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≥—Ä–∏–∫. –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–ª—É–±–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä '–ò–≥—Ä–∞—Ä–∏—É–º'. –î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è.")
    if DBcontrol.RegistrDB.FindID(int(message.from_user.id)):
        await message.answer('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!')
    else:
        DBcontrol.RegistrDB.sentID(int(message.from_user.id))
        await state.set_state(Reg.qname)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")


@router.message(F.text == '–°–ñ–ï–ï–ï–ß–¨ –í–°–Å–Å–Å–Å!!!!!')
async def delall(message: Message):
    await message.answer('–í–°–Å –°–ì–û–†–ï–õ–û –ù–ê–•–£–ô! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ.\n\n'
                         '–ù–∞–∂–º–∏ –Ω–∞ üëâ /start')


@router.message(Reg.qname)
async def reg_s2(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    DBcontrol.RegistrDB.sentName(int(message.from_user.id), message.text)
    await state.set_state(Reg.qsname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")


@router.message(Reg.qsname)
async def reg_s3(message: Message, state: FSMContext):
    await state.update_data(sname=message.text)
    await state.set_state(Reg.qinstit)
    await message.answer("–¢—ã –∏–∑ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ?", reply_markup=kb.YNkeyb)


@router.message(Reg.qinstit)
async def reg_s4(message: Message, state: FSMContext):
    await state.update_data(instit=message.text)
    if message.text == '‚úÖ–î–∞':
        await state.set_state(Reg.fped)
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞—É–ª—å—Ç–µ—Ç', reply_markup=kb.faculty_one)
    if message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ. –î–æ—Å—Ç–∞—Ç—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç')
        await state.update_data(faculty='–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*')
        await state.set_state(Reg.qcourse)


@router.message(Reg.fped, F.text == '‚¨ÖÔ∏è–ù–∞ —Å—Ç—Ä. 1')
async def reg_topage1(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 1', reply_markup=kb.faculty_one)


@router.message(Reg.fped, (F.text == '‚û°Ô∏è–ù–∞ —Å—Ç—Ä. 2' or F.text == '‚¨ÖÔ∏è–ù–∞ —Å—Ç—Ä. 2'))
async def reg_topage2(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2', reply_markup=kb.faculty_two)


@router.message(Reg.fped, F.text == '‚û°Ô∏è–ù–∞ —Å—Ç—Ä. 3')
async def reg_topage3(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 3', reply_markup=kb.faculty_three)


@router.message(Reg.fped)
async def reg_s5ped(message: Message, state: FSMContext):
    await state.update_data(faculty=message.text)
    await message.answer('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ. –î–æ—Å—Ç–∞—Ç—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç',
                         reply_markup=kb.base_key)
    await state.set_state(Reg.qcourse)


@router.message(Reg.qcourse)
async def check_reg(message: Message, state: FSMContext):
    await state.update_data(course=message.text)
    info = await state.get_data()
    global reg_info
    reg_info[str(message.from_user.id)] = info
    # print(reg_info)
    await message.answer(f'–Ø –ø–æ–Ω—è–ª —Ç–µ–±—è. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!)\n\n'
                         f'–î–∞–≤–∞–π –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º.\n'
                         f'–¢–µ–±—è –∑–æ–≤—É—Ç {reg_info[str(message.from_user.id)]['name']} {reg_info[str(message.from_user.id)]['sname']}\n'
                         f'–¢—ã –∏–∑ –ø–µ–¥–∞: {reg_info[str(message.from_user.id)]["instit"]}\n'
                         f'—Ç–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {reg_info[str(message.from_user.id)]["faculty"]}\n'
                         f'–ö—É—Ä—Å: {reg_info[str(message.from_user.id)]["course"]}\n\n\n'
                         f'*–ï—Å–ª–∏ –≤—ã –Ω–µ —É—á–∏—Ç–µ—Å—å –≤ –Æ–£—Ä–ì–ì–ü–£, –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ')
    await message.answer('–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', reply_markup=kb.YNkeyb)
    await state.set_state(Reg.fcheck)


@router.message(Reg.fcheck)
async def FinCheck(message: Message, state: FSMContext):
    if message.text == '‚úÖ–î–∞':
        await message.answer('–£—Ä–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –Ω–∞–º!')
        import DBcontrol
        await DBcontrol.sent_registData(reg_info)
        await state.clear()
    if message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–û–π, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑. '
                             '–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n'
                             '–ù–∞–∂–º–∏ üëâ /start')
        # –°–¥–µ–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º—É—à–∫–∞—Ö



@router.message(Command('hell'))
async def hell_comand(message: Message):
    await message.answer("–≠–¢–û –ú–û–Å –ë–õ–Ø–¢–¨ –î–£–®–ï–í–ù–û–ï –†–ê–í–ù–û–í–ï–°–ò–ï!", reply_markup=kb.base_key)
