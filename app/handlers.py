#–§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω—ã —Ö—ç–Ω–¥–ª–µ—Ä—ã, –æ—Ç–≤–µ—á–∞—é—â–∏–µ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from datetime import datetime
from time import sleep

from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram import Router, F, Bot

from testconf import TOKEN_API
bot = Bot(token=TOKEN_API)

import app.keyboards as kb
from app.keyboards import KeyAdm
from config import SPEC_ROLE
from lerning import users
from testconf import ADM_IDS, SPEC_ROLE
from app.statuses import Reg, AdmStatus
import DBcontrol
from  app.Timecontrol import TimeCount
from app.sendler import sedText

router = Router()

reg_info = {}



@router.message(Command("help"))
async def help_comand(message: Message):
    await message.reply("–ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç")


@router.message(Command('start'))
async def start_comand(message: Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ò–≥—Ä–∏–∫. –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–ª—É–±–∞ –Ω–∞—Å—Ç–æ–ª—å–Ω—ã—Ö –∏–≥—Ä '–ò–≥—Ä–∞—Ä–∏—É–º'.")
    if DBcontrol.RegistrDB.FindID(int(message.from_user.id)):
        await message.answer('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!')
    else:
        DBcontrol.RegistrDB.sentID(int(message.from_user.id))
        await state.set_state(Reg.qname)
        await message.answer("–î–∞–≤–∞–π –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! \n"
                             "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –∏–º—è")
    if ADM_IDS.count(str(message.from_user.id)) > 0:
        DBcontrol.RegistrDB.sentRole(int(message.from_user.id), 'adm')
        if SPEC_ROLE.count(str(message.from_user.id)) > 0:
            await message.answer('–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "–ö–æ–Ω—å-–≤-–ø–∞–ª—å—Ç–æ". –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!')
        await state.set_state(AdmStatus.qact)
        await message.answer('–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"', reply_markup=kb.KeyAdm.menuKey)
    else:
        DBcontrol.RegistrDB.sentRole(int(message.from_user.id), 'chlen')


@router.message(F.text == '–°–ñ–ï–ï–ï–ß–¨ –í–°–Å–Å–Å–Å!!!!!')
async def delall(message: Message):
    await message.answer('–í–°–Å –°–ì–û–†–ï–õ–û –ù–ê–•–£–ô! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ.\n\n'
                         '–ù–∞–∂–º–∏ –Ω–∞ üëâ /start')


@router.message(Reg.qname)
async def reg_s2(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    DBcontrol.RegistrDB.sentName(int(message.from_user.id), message.text)
    await state.set_state(Reg.qsname)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é")


@router.message(Reg.qsname)
async def reg_s3(message: Message, state: FSMContext):
    await state.update_data(sname=message.text)
    DBcontrol.RegistrDB.sentSName(int(message.from_user.id), str(message.text))
    await state.set_state(Reg.qinstit)
    await message.answer("–¢—ã –∏–∑ –ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–≥–æ?", reply_markup=kb.YNkeyb)


@router.message(Reg.qinstit)
async def reg_s4(message: Message, state: FSMContext):
    await state.update_data(instit=message.text)
    if message.text == '‚úÖ–î–∞':
        await state.set_state(Reg.fped)
        await message.answer('–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ñ–∞—É–ª—å—Ç–µ—Ç', reply_markup=kb.faculty_one)
    if message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ. –î–æ—Å—Ç–∞—Ç—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç')
        await state.update_data(faculty='–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*')
        await state.set_state(Reg.qcourse)
    DBcontrol.RegistrDB.sentInstitute(int(message.from_user.id), str(message.text))


@router.message(Reg.fped, F.text == '‚¨ÖÔ∏è–ù–∞ —Å—Ç—Ä. 1')
async def reg_topage1(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 1', reply_markup=kb.faculty_one)


@router.message(Reg.fped, (F.text == '‚û°Ô∏è–ù–∞ —Å—Ç—Ä. 2' or F.text == '‚¨ÖÔ∏è–ù–∞ —Å—Ç—Ä. 2'))
async def reg_topage2(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 2', reply_markup=kb.faculty_two)


@router.message(Reg.fped, F.text == '‚û°Ô∏è–ù–∞ —Å—Ç—Ä. 3')
async def reg_topage3(message: Message, state: FSMContext):
    await message.answer('–ü—Ä–∏–Ω—è—Ç–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É 3', reply_markup=kb.faculty_three)


@router.message(Reg.fped)
async def reg_s5ped(message: Message, state: FSMContext):
    await state.update_data(faculty=message.text)
    DBcontrol.RegistrDB.sentFacult(int(message.from_user.id), str(message.text))
    await message.answer('–ü–æ–Ω—è–ª, –ø—Ä–∏–Ω—è–ª, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –Ω–∞ –∫–∞–∫–æ–º —Ç—ã –∫—É—Ä—Å–µ. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–∏—Ñ—Ä—É –≤ —á–∞—Ç',
                         reply_markup=kb.base_key)
    await state.set_state(Reg.qcourse)


@router.message(Reg.qcourse)
async def check_reg(message: Message, state: FSMContext):
    await state.update_data(course=message.text)
    DBcontrol.RegistrDB.sentCourse(int(message.from_user.id), str(message.text))
    info = await state.get_data()
    global reg_info
    reg_info[str(message.from_user.id)] = info
    # print(reg_info)
    await message.answer(f'–Ø –ø–æ–Ω—è–ª —Ç–µ–±—è. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!)\n\n'
                         f'–î–∞–≤–∞–π –≤—Å—ë –ø—Ä–æ–≤–µ—Ä–∏–º.\n'
                         f'–¢–µ–±—è –∑–æ–≤—É—Ç {reg_info[str(message.from_user.id)]['name']} {reg_info[str(message.from_user.id)]['sname']}\n'
                         f'–¢—ã –∏–∑ –ø–µ–¥–∞: {reg_info[str(message.from_user.id)]["instit"]}\n'
                         f'—Ç–≤–æ–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {reg_info[str(message.from_user.id)]["faculty"]}\n'
                         f'–ö—É—Ä—Å: {reg_info[str(message.from_user.id)]["course"]}\n\n\n'
                         f'*–ï—Å–ª–∏ –≤—ã –Ω–µ —É—á–∏—Ç–µ—Å—å –≤ –Æ–£—Ä–ì–ì–ü–£, –º—ã –Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –í–∞—à–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ')
    await message.answer('–í—Å—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ?', reply_markup=kb.YNkeyb)
    await state.set_state(Reg.fcheck)


@router.message(Reg.fcheck)
async def FinCheck(message: Message, state: FSMContext):
    if message.text == '‚úÖ–î–∞':
        await message.answer('–£—Ä–∞! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å. –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –Ω–∞–º!')
        import DBcontrol
        # await DBcontrol.sent_registData(reg_info)
        await state.clear()
    if message.text == '‚ùå–ù–µ—Ç':
        await message.answer('–û–π, –¥–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑. '
                             '–ï—Å–ª–∏ —Å–Ω–æ–≤–∞ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è, —è –ø–µ—Ä–µ–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n\n'
                             '–ù–∞–∂–º–∏ üëâ /start')
        # –°–¥–µ–ª–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º—É—à–∫–∞—Ö



@router.message(Command('hell'))
async def hell_comand(message: Message):
    await message.answer("–≠–¢–û –ú–û–Å –ë–õ–Ø–¢–¨ –î–£–®–ï–í–ù–û–ï –†–ê–í–ù–û–í–ï–°–ò–ï!", reply_markup=kb.base_key)



@router.message(AdmStatus.qact)
async def GetAdmAct(message: Message, state: FSMContext):
    if message.text == '–í—Å—Ç—Ä–µ—á–∏':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=KeyAdm.meetKey)
        await state.set_state(AdmStatus.meets)
    elif message.text == '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É':
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—ã–ª–∫–∏')
        await state.set_state(AdmStatus.qTextsends)

@router.message(AdmStatus.meets)
async def GetMeets(message: Message, state: FSMContext):
    if message.text == '–ù–∞—á–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É':
        global st_meet
        st_meet = datetime.now()
        await message.answer(f'–í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –≤—Å—Ç—Ä–µ—á—É –≤ {st_meet.strftime("%H:%M")}')

    elif message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É':
        end_meet = datetime.now()
        await message.answer('–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ—Ç—Å—è...')
        DBcontrol.Meets.sendMeetData(datetime.now().strftime("%d.%m.%Y"),
                                     st_meet.strftime("%H:%M"),
                                     end_meet.strftime("%H:%M"),
                                     TimeCount(st_meet, end_meet))
        sleep(5)
        await message.answer(f'–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ {end_meet.strftime("%H:%M")}. \n\n '
                             f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å—Ç—Ä–µ—á–∏: {TimeCount(st_meet, end_meet)} —Å–µ–∫—É–Ω–¥', reply_markup=KeyAdm.menuKey)
        await state.set_state(AdmStatus.qact)

@router.message(AdmStatus.qTextsends)
async def GetSendText(message: Message, state: FSMContext):
    global sendlerText
    sendlerText = message.text
    await message.answer(f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ \n\n'
                         f'{sendlerText}', reply_markup=KeyAdm.sendKey)
    await state.set_state(AdmStatus.confsends)

@router.message(AdmStatus.confsends)
async def GetSendText(message: Message, state: FSMContext):
    if message.text == '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏':
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏—è...')
        users = DBcontrol.rassl.getUsersID('adm')
        await sedText(users, sendlerText)
        await message.answer('–£—Å–ø–µ—à–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞')

    elif message.text == '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç':
        await message.answer('–î–∞–≤–∞–π –ø–æ–Ω–æ–≤—ã–π. –í—Å—ë —Ö—É–π–Ω—è. –í–≤–æ–¥–∏ –≤—Å—ë –µ—â–µ —Ä–∞–∑.')
        await state.set_state(AdmStatus.qTextsends)






